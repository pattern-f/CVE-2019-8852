//
//  apple_double.h
//  exploit-1
//
//  Created by Quote on 2020/6/2.
//  Copyright Â© 2020 Quote. All rights reserved.
//

#ifndef apple_double_h
#define apple_double_h

#include <stdint.h>

// ---------------------------------------------------------------------------
// from kernel
// ---------------------------------------------------------------------------

#define FINDERINFOSIZE  32

typedef struct apple_double_entry {
    u_int32_t   type;     /* entry type: see list, 0 invalid */
    u_int32_t   offset;   /* entry data offset from the beginning of the file. */
    u_int32_t   length;   /* entry data length in bytes. */
} __attribute__((aligned(2), packed)) apple_double_entry_t;

typedef struct apple_double_header {
    u_int32_t   magic;         /* == ADH_MAGIC */
    u_int32_t   version;       /* format version: 2 = 0x00020000 */
    u_int32_t   filler[4];
    u_int16_t   numEntries;    /* number of entries which follow */
    apple_double_entry_t   entries[2];  /* 'finfo' & 'rsrc' always exist */
    u_int8_t    finfo[FINDERINFOSIZE];  /* Must start with Finder Info (32 bytes) */
    u_int8_t    pad[2];        /* get better alignment inside attr_header */
} __attribute__((aligned(2), packed)) apple_double_header_t;

#define ADHDRSIZE  (4+4+16+2)

/* Entries are aligned on 4 byte boundaries */
typedef struct attr_entry {
    u_int32_t   offset;     /* file offset to data */
    u_int32_t   length;     /* size of attribute data */
    u_int16_t   flags;
    u_int8_t    namelen;
    u_int8_t    name[1];    /* NULL-terminated UTF-8 name (up to 128 bytes max) */
} __attribute__((aligned(2), packed)) attr_entry_t;


/* Header + entries must fit into 64K.  Data may extend beyond 64K. */
typedef struct attr_header {
    apple_double_header_t  appledouble;
    u_int32_t   magic;        /* == ATTR_HDR_MAGIC */
    u_int32_t   debug_tag;    /* for debugging == file id of owning file */
    u_int32_t   total_size;   /* file offset of end of attribute header + entries + data */
    u_int32_t   data_start;   /* file offset to attribute data area */
    u_int32_t   data_length;  /* length of attribute data area */
    u_int32_t   reserved[3];
    u_int16_t   flags;
    u_int16_t   num_attrs;
} __attribute__((aligned(2), packed)) attr_header_t;

typedef struct {} *vfs_context_t;
typedef struct {} *vnode_t;

/* Runtime information about the attribute file. */
typedef struct attr_info {
    vfs_context_t          context;
    vnode_t                filevp;
    size_t                 filesize;
    size_t                 iosize;
    u_int8_t               *rawdata;
    size_t                 rawsize;  /* minimum of filesize or ATTR_MAX_HDR_SIZE */
    apple_double_header_t  *filehdr;
    apple_double_entry_t   *finderinfo;
    apple_double_entry_t   *rsrcfork;
    attr_header_t          *attrhdr;
    attr_entry_t           *attr_entry;
    u_int8_t               readonly;
    u_int8_t               emptyfinderinfo;
} attr_info_t;

#define ATTR_ALIGN 3L  /* Use four-byte alignment */

#define ATTR_ENTRY_LENGTH(namelen)  \
    ((sizeof(attr_entry_t) - 1 + (namelen) + ATTR_ALIGN) & (~ATTR_ALIGN))

#define ATTR_NEXT(ae)  \
     (attr_entry_t *)((u_int8_t *)(ae) + ATTR_ENTRY_LENGTH((ae)->namelen))

#define ATTR_VALID(ae, ai)  \
    ((u_int8_t *)ATTR_NEXT(ae) <= ((ai).rawdata + (ai).rawsize))

#define SWAP16(x)  OSSwapBigToHostInt16((x))
#define SWAP32(x)  OSSwapBigToHostInt32((x))
#define SWAP64(x)  OSSwapBigToHostInt64((x))

#define ADH_MAGIC     0x00051607
#define ADH_VERSION   0x00020000

#define ATTR_HDR_MAGIC     0x41545452   /* 'ATTR' */

#define ATTR_MAX_HDR_SIZE  65536

// ---------------------------------------------------------------------------

#define MOUNT_DIR "/Volumes/WIDGET/"

extern attr_info_t attrinfo;

void create_xattr_template(void);

#endif /* apple_double_h */
